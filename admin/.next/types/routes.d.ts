// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/[storeId]" | "/[storeId]/billboards" | "/[storeId]/billboards/[billboardId]" | "/[storeId]/categories" | "/[storeId]/categories/[categoryId]" | "/[storeId]/colors" | "/[storeId]/colors/[colorId]" | "/[storeId]/orders" | "/[storeId]/products" | "/[storeId]/products/[productId]" | "/[storeId]/settings" | "/[storeId]/sizes" | "/[storeId]/sizes/[sizeId]" | "/sign-in/[[...sign-in]]" | "/sign-up/[[...sign-up]]"
type AppRouteHandlerRoutes = "/api/[storeId]/billboards" | "/api/[storeId]/billboards/[billboardId]" | "/api/[storeId]/categories" | "/api/[storeId]/categories/[categoryId]" | "/api/[storeId]/colors" | "/api/[storeId]/colors/[sizeId]" | "/api/[storeId]/products" | "/api/[storeId]/products/[productId]" | "/api/[storeId]/sizes" | "/api/[storeId]/sizes/[sizeId]" | "/api/stores" | "/api/stores/[storeId]"
type PageRoutes = never
type LayoutRoutes = "/" | "/[storeId]"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/[storeId]": { "storeId": string; }
  "/[storeId]/billboards": { "storeId": string; }
  "/[storeId]/billboards/[billboardId]": { "storeId": string; "billboardId": string; }
  "/[storeId]/categories": { "storeId": string; }
  "/[storeId]/categories/[categoryId]": { "storeId": string; "categoryId": string; }
  "/[storeId]/colors": { "storeId": string; }
  "/[storeId]/colors/[colorId]": { "storeId": string; "colorId": string; }
  "/[storeId]/orders": { "storeId": string; }
  "/[storeId]/products": { "storeId": string; }
  "/[storeId]/products/[productId]": { "storeId": string; "productId": string; }
  "/[storeId]/settings": { "storeId": string; }
  "/[storeId]/sizes": { "storeId": string; }
  "/[storeId]/sizes/[sizeId]": { "storeId": string; "sizeId": string; }
  "/api/[storeId]/billboards": { "storeId": string; }
  "/api/[storeId]/billboards/[billboardId]": { "storeId": string; "billboardId": string; }
  "/api/[storeId]/categories": { "storeId": string; }
  "/api/[storeId]/categories/[categoryId]": { "storeId": string; "categoryId": string; }
  "/api/[storeId]/colors": { "storeId": string; }
  "/api/[storeId]/colors/[sizeId]": { "storeId": string; "sizeId": string; }
  "/api/[storeId]/products": { "storeId": string; }
  "/api/[storeId]/products/[productId]": { "storeId": string; "productId": string; }
  "/api/[storeId]/sizes": { "storeId": string; }
  "/api/[storeId]/sizes/[sizeId]": { "storeId": string; "sizeId": string; }
  "/api/stores": {}
  "/api/stores/[storeId]": { "storeId": string; }
  "/sign-in/[[...sign-in]]": { "sign-in"?: string[]; }
  "/sign-up/[[...sign-up]]": { "sign-up"?: string[]; }
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/[storeId]": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
